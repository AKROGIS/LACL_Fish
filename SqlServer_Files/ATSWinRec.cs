using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;
using System.Linq;
using System.Text;

namespace SqlServer_Files
{
    public class ATSWinRec : IParser
    {
        private readonly Byte[] _bytes;

        public ATSWinRec(Byte[] bytes)
        {
            if (bytes == null || bytes.Length == 0)
                throw new ArgumentNullException("bytes", "byte array must not be null or empty");
            _bytes = bytes;
        }

        public bool IsValidData
        {
            get
            {
                var header = GetLines(_bytes).Skip(1).FirstOrDefault();
                if (header == null || !header.StartsWith("Generated By: ATSWinRec_C v.109;"))
                    return false;
                var data = GetLines(_bytes).Skip(7).FirstOrDefault();
                if (data == null)
                    return false;
                var fieldCount = data.TrimEnd(',').Split(',').Length;
                return fieldCount == 9 || fieldCount == 11 || fieldCount == 12;
            }
        }

        public void ParseFileIntoDatabase(SqlInt32 fileId, SqlConnection database)
        {
            ClearDatabase(database, fileId);
            int lineNumber = 7;
            int stationaryTargets = 0;
            int aerialTargets = 0;
            bool foundAerialSummary = false;
            bool foundStationarySummary = false;
            foreach (var line in GetLines(_bytes).Skip(lineNumber))
            {
                lineNumber++;
                var tokens = line.TrimEnd(',').Split(',');
                switch (tokens.Length)
                {
                    case 9:
                        AddLineToStationary(database, fileId, lineNumber, tokens);
                        stationaryTargets++;
                        break;
                    case 11:
                        AddLineToTracking(database, fileId, lineNumber, tokens);
                        aerialTargets++;
                        break;
                    case 12:
                        AddLineToTrackingUtm(database, fileId, lineNumber, tokens);
                        aerialTargets++;
                        break;
                    default:
                        if (tokens.Length == 1)
                        {
                            var token = tokens[0].Trim();
                            if (token == "")
                                continue;
                            if (token == String.Format("This file contains {0} Aerial targets", aerialTargets))
                            {
                                foundAerialSummary = true;
                                continue;
                            }
                            if (token == String.Format("This file contains {0} Stationary targets", stationaryTargets))
                            {
                                foundStationarySummary = true;
                                continue;
                            }
                        }
                        throw new InvalidDataException(String.Format("Line {0} is not a recognized format.", lineNumber));
                }
            }
            if (stationaryTargets == 0 && aerialTargets == 0)
                throw new InvalidDataException("No targets found in data file");
            if (!foundAerialSummary || !foundStationarySummary)
                throw new InvalidDataException("Summary lines not found at end of file, or summary does not match data");
        }

        private static IEnumerable<string> GetLines(Byte[] bytes)
        {
            using (var stream = new MemoryStream(bytes, 0, bytes.Length))
            using (var reader = new StreamReader(stream, Encoding.UTF8))
                while (!reader.EndOfStream)
                    yield return reader.ReadLine();
        }

        private static void ClearDatabase(SqlConnection database, SqlInt32 fileId)
        {
            var sql = "DELETE [dbo].[TelemetryDataATSStationary] WHERE FileId = @FileId";
            using (var command = new SqlCommand(sql, database))
            {
                command.Parameters.Add(new SqlParameter("@FileId", SqlDbType.Int) { Value = fileId });
                command.ExecuteNonQuery();
            }
            sql = "DELETE [dbo].[TelemetryDataATSTracking] WHERE FileId = @FileId";
            using (var command = new SqlCommand(sql, database))
            {
                command.Parameters.Add(new SqlParameter("@FileId", SqlDbType.Int) { Value = fileId });
                command.ExecuteNonQuery();
            }
        }

        private static void AddLineToStationary(SqlConnection database, SqlInt32 fileId, int lineNumber, string[] tokens)
        {
            const string sql = "INSERT INTO [dbo].[TelemetryDataATSStationary] (FileId, LineNumber, Year, Day, Hour, Minute, Antenna, Frequency, TagNumberAndMortality, SignalStrength, DuplicateCount)" +
                               " VALUES (@FileId, @LineNumber, @Year, @Day, @Hour, @Minute, @Antenna, @Frequency, @TagNumberAndMortality, @SignalStrength, @DuplicateCount)";
            using (var command = new SqlCommand(sql, database))
            {
                command.Parameters.Add(new SqlParameter("@FileId", SqlDbType.Int) { Value = fileId });
                command.Parameters.Add(new SqlParameter("@LineNumber", SqlDbType.Int) { Value = lineNumber });
                command.Parameters.Add(new SqlParameter("@Year", SqlDbType.Int) { Value = Int32.Parse(tokens[0]) });
                command.Parameters.Add(new SqlParameter("@Day", SqlDbType.Int) { Value = Int32.Parse(tokens[1]) });
                command.Parameters.Add(new SqlParameter("@Hour", SqlDbType.Int) { Value = Int32.Parse(tokens[2]) });
                command.Parameters.Add(new SqlParameter("@Minute", SqlDbType.Int) { Value = Int32.Parse(tokens[3]) });
                command.Parameters.Add(new SqlParameter("@Antenna", SqlDbType.Int) { Value = Int32.Parse(tokens[4]) });
                command.Parameters.Add(new SqlParameter("@Frequency", SqlDbType.Int) { Value = Int32.Parse(tokens[5]) });
                command.Parameters.Add(new SqlParameter("@TagNumberAndMortality", SqlDbType.Int) { Value = Int32.Parse(tokens[6]) });
                command.Parameters.Add(new SqlParameter("@SignalStrength", SqlDbType.Int) { Value = Int32.Parse(tokens[7]) });
                command.Parameters.Add(new SqlParameter("@DuplicateCount", SqlDbType.Int) { Value = Int32.Parse(tokens[8]) });
                command.ExecuteNonQuery();
            }
        }

        private static void AddLineToTracking(SqlConnection database, SqlInt32 fileId, int lineNumber, string[] tokens)
        {
            const string sql = "INSERT INTO [dbo].[TelemetryDataATSTracking] (FileId, LineNumber, Year, Day, Hour, Minute, Second, Frequency, TagNumberAndMortality, SignalStrength, Latitude, Longitude, GpsAge)" +
                               " VALUES (@FileId, @LineNumber, @Year, @Day, @Hour, @Minute, @Second, @Frequency, @TagNumberAndMortality, @SignalStrength, @Latitude, @Longitude, @GpsAge)";
            using (var command = new SqlCommand(sql, database))
            {
                command.Parameters.Add(new SqlParameter("@FileId", SqlDbType.Int) { Value = fileId });
                command.Parameters.Add(new SqlParameter("@LineNumber", SqlDbType.Int) { Value = lineNumber });
                command.Parameters.Add(new SqlParameter("@Year", SqlDbType.Int) { Value = Int32.Parse(tokens[0]) });
                command.Parameters.Add(new SqlParameter("@Day", SqlDbType.Int) { Value = Int32.Parse(tokens[1]) });
                command.Parameters.Add(new SqlParameter("@Hour", SqlDbType.Int) { Value = Int32.Parse(tokens[2]) });
                command.Parameters.Add(new SqlParameter("@Minute", SqlDbType.Int) { Value = Int32.Parse(tokens[3]) });
                command.Parameters.Add(new SqlParameter("@Second", SqlDbType.Int) { Value = Int32.Parse(tokens[4]) });
                command.Parameters.Add(new SqlParameter("@Frequency", SqlDbType.Int) { IsNullable = true, Value = tokens[5] == "NA" ? null : (int?)Int32.Parse(tokens[5]) });
                command.Parameters.Add(new SqlParameter("@TagNumberAndMortality", SqlDbType.Int) { IsNullable = true, Value = tokens[6] == "NA" ? null : (int?)Int32.Parse(tokens[6]) });
                command.Parameters.Add(new SqlParameter("@SignalStrength", SqlDbType.Int) { IsNullable = true, Value = tokens[7] == "NA" ? null : (int?)Int32.Parse(tokens[7]) });
                command.Parameters.Add(new SqlParameter("@Latitude", SqlDbType.Real) { Value = Single.Parse(tokens[8]) });
                command.Parameters.Add(new SqlParameter("@Longitude", SqlDbType.Real) { Value = Single.Parse(tokens[9]) });
                command.Parameters.Add(new SqlParameter("@GpsAge", SqlDbType.Int) { Value = Int32.Parse(tokens[10]) });
                command.ExecuteNonQuery();
            }
        }

        private static void AddLineToTrackingUtm(SqlConnection database, SqlInt32 fileId, int lineNumber, string[] tokens)
        {
            const string sql = "INSERT INTO [dbo].[TelemetryDataATSTracking] (FileId, LineNumber, Year, Day, Hour, Minute, Second, Frequency, TagNumberAndMortality, SignalStrength, UtmX, UtmY, UtmZone, GpsAge)" +
                               " VALUES (@FileId, @LineNumber, @Year, @Day, @Hour, @Minute, @Second, @Frequency, @TagNumberAndMortality, @SignalStrength, @UtmX, @UtmY, @UtmZone, @GpsAge)";
            using (var command = new SqlCommand(sql, database))
            {
                command.Parameters.Add(new SqlParameter("@FileId", SqlDbType.Int) { Value = fileId });
                command.Parameters.Add(new SqlParameter("@LineNumber", SqlDbType.Int) { Value = lineNumber });
                command.Parameters.Add(new SqlParameter("@Year", SqlDbType.Int) { Value = Int32.Parse(tokens[0]) });
                command.Parameters.Add(new SqlParameter("@Day", SqlDbType.Int) { Value = Int32.Parse(tokens[1]) });
                command.Parameters.Add(new SqlParameter("@Hour", SqlDbType.Int) { Value = Int32.Parse(tokens[2]) });
                command.Parameters.Add(new SqlParameter("@Minute", SqlDbType.Int) { Value = Int32.Parse(tokens[3]) });
                command.Parameters.Add(new SqlParameter("@Second", SqlDbType.Int) { Value = Int32.Parse(tokens[4]) });
                command.Parameters.Add(new SqlParameter("@Frequency", SqlDbType.Int) { Value = Int32.Parse(tokens[5]) });
                command.Parameters.Add(new SqlParameter("@TagNumberAndMortality", SqlDbType.Int) { Value = Int32.Parse(tokens[6]) });
                command.Parameters.Add(new SqlParameter("@SignalStrength", SqlDbType.Int) { Value = Int32.Parse(tokens[7]) });
                command.Parameters.Add(new SqlParameter("@UtmX", SqlDbType.Real) { Value = Single.Parse(tokens[8]) });
                command.Parameters.Add(new SqlParameter("@UtmY", SqlDbType.Real) { Value = Single.Parse(tokens[9]) });
                command.Parameters.Add(new SqlParameter("@UtmZone", SqlDbType.NVarChar) { Value = tokens[10] });
                command.Parameters.Add(new SqlParameter("@GpsAge", SqlDbType.Int) { Value = Int32.Parse(tokens[11]) });
                command.ExecuteNonQuery();
            }
        }
    }
}
