#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Fish_Tagging")]
	public partial class FishTaggingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void UpdateRawDataFile(RawDataFile instance);
    #endregion
		
		public FishTaggingDataContext() : 
				base(global::DataModel.Properties.Settings.Default.Fish_TaggingConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FishTaggingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FishTaggingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FishTaggingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FishTaggingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RawDataFile> RawDataFiles
		{
			get
			{
				return this.GetTable<RawDataFile>();
			}
		}
		
		private void InsertRawDataFile(RawDataFile obj)
		{
			System.Nullable<int> p1 = obj.FileId;
			System.Nullable<System.DateTime> p2 = obj.UploadDate;
			string p3 = obj.UploaderLogin;
			this.RawDataFile_Insert(obj.FileName, obj.FolderName, obj.Contents, ref p1, ref p2, ref p3);
			obj.FileId = p1.GetValueOrDefault();
			obj.UploadDate = p2.GetValueOrDefault();
			obj.UploaderLogin = p3;
		}
		
		private void DeleteRawDataFile(RawDataFile obj)
		{
			RawDataFile original = ((RawDataFile)(RawDataFiles.GetOriginalEntityState(obj)));
			this.RawDataFile_Delete(((System.Nullable<int>)(original.FileId)));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RawDataFile_Delete")]
		public int RawDataFile_Delete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FileId", DbType="Int")] System.Nullable<int> fileId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fileId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RawDataFile_Insert")]
		public int RawDataFile_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FileName", DbType="NVarChar(255)")] string fileName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FolderName", DbType="NVarChar(1000)")] string folderName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Contents", DbType="VarBinary(MAX)")] System.Data.Linq.Binary contents, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FileId", DbType="Int")] ref System.Nullable<int> fileId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UploadDate", DbType="DateTime2")] ref System.Nullable<System.DateTime> uploadDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UploaderLogin", DbType="NVarChar(128)")] ref string uploaderLogin)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fileName, folderName, contents, fileId, uploadDate, uploaderLogin);
			fileId = ((System.Nullable<int>)(result.GetParameterValue(3)));
			uploadDate = ((System.Nullable<System.DateTime>)(result.GetParameterValue(4)));
			uploaderLogin = ((string)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RawDataFiles")]
	public partial class RawDataFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileId;
		
		private string _FileName;
		
		private string _FolderName;
		
		private System.DateTime _UploadDate;
		
		private string _UploaderLogin;
		
		private System.Data.Linq.Link<System.Data.Linq.Binary> _Contents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileIdChanging(int value);
    partial void OnFileIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFolderNameChanging(string value);
    partial void OnFolderNameChanged();
    partial void OnUploadDateChanging(System.DateTime value);
    partial void OnUploadDateChanged();
    partial void OnUploaderLoginChanging(string value);
    partial void OnUploaderLoginChanged();
    partial void OnContentsChanging(System.Data.Linq.Binary value);
    partial void OnContentsChanged();
    #endregion
		
		public RawDataFile()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileId
		{
			get
			{
				return this._FileId;
			}
			set
			{
				if ((this._FileId != value))
				{
					this.OnFileIdChanging(value);
					this.SendPropertyChanging();
					this._FileId = value;
					this.SendPropertyChanged("FileId");
					this.OnFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FolderName", DbType="NVarChar(1000)")]
		public string FolderName
		{
			get
			{
				return this._FolderName;
			}
			set
			{
				if ((this._FolderName != value))
				{
					this.OnFolderNameChanging(value);
					this.SendPropertyChanging();
					this._FolderName = value;
					this.SendPropertyChanged("FolderName");
					this.OnFolderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploaderLogin", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UploaderLogin
		{
			get
			{
				return this._UploaderLogin;
			}
			set
			{
				if ((this._UploaderLogin != value))
				{
					this.OnUploaderLoginChanging(value);
					this.SendPropertyChanging();
					this._UploaderLogin = value;
					this.SendPropertyChanged("UploaderLogin");
					this.OnUploaderLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Contents
		{
			get
			{
				return this._Contents.Value;
			}
			set
			{
				if ((this._Contents.Value != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents.Value = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
